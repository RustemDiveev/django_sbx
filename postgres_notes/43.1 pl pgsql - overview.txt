PL/pgSQL - подгружаемый процедурный язык для Postgres. Цель разработки:
	- Использование для создания функций, процедур и триггеров 
	- Добавление контролирующих структур в SQL 
	- Выполнение сложных вычислений 
	- Наследование всех пользовательских типов, функций, процедур и операторов
	- Может быть доверенным по отношению к серверу 
	- Легко используемый 
	
Функции на этом языке могут использоваться везде, где могут использоваться встроенные функции. Например, можно создать сложные функции с условиями и вычислениями и позже использовать их для определения операторов или использовать в индексных выражениях. 

С версии 9.0 и выше язык установлен по умолчанию. Тем не менее, это до сих пор подгружаемый модуль, поэтому администраторы переживающие за безопасность - могут убрать его.

------ Преимущества использования ------

SQL - язык, использующийся в большинстве реляционных БД как язык запросов. Он переносимый и его легко изучить. Но каждое SQL-выражение должно быть выполнено отдельно сервером БД. 

Это означает что клиентское приложение должно отправить каждый запрос на сервер БД, дождаться процессинга, получить и обработать результаты, выполнить вычисления и отправить дальнейшие запросы на сервер. Все это обеспечивает межпроцессное взаимодействие и перегрузку сети, если клиент на другой машине, не там, где сервер БД. 

С PL/pgSQL можно сформировать блое из нескольких вычислений или запросов внутри сервера БД, при этом приобретая силу процедурного языка и облегчая использование SQL с значительным облегчением нагрузки взаимодействия между клиентом и сервером. 

	- Убирается лишнее взаимодействие между клиентом и сервером 
	- Промежуточные результаты на клиенте не должны переноситься туда-сюда между сервером и клиентом 
	- Можно избежать несколько этапов парсинга запроса 
	
Все это может вызвать значительное повышение производительности по сравнению с приложением, не использующим встроенные функции.

Также, с PL/pgSQL можно использовать все типы данных, операторы и функции SQL. 

----- Поддерживаемые типы данных аргументов и результатов ----- 

Функции, написанные на PL/pgSQL могут принимать в качестве аргументов любой скалярный или массивный тип данных, поддерживаемый сервером - и могут возвращать любой результат из этих типов данных. Они также могут принимать или возвращать любой сложный тип (строковый тип), у которого указано имя. 

Также возможно объявить PL/pgSQL функцию, принимающую record - что означает, что на вход принимается любой сложный тип, или то, что функция возвращает record, что означает, что результат - тип строки, чьи колонки определяются спецификацией вызывающего запроса. 

PL/pgSQL функции могут быть объявлены так, чтобы принимать различащееся количество аргументов при помощи  маркера VARIADIC. Работает также как SQL функции. 

PL/pgSQL функции могут быть объявлены так, чтобы принимать и возвращать полиморфические типы, или позволять действительным типам данных, обрабатываемых функцией изменяться от вызова к вызову. 

PL/pgSQL функции могут быть объявлены так, чтобы возвращать множество или таблицу любого типа данных, который может быть возвращен как одиночный экземпляр. Такая функция генерирует выходные данные выполняя RETURN NEXT для каждого желаемого элемента результирующего набора, или использую RETURN QUERY для вывода результатов запроса. 

Наконец, PL/pgSQL функция может быть объявлена для возврата void, если она не возвращает значение. Альтернативно, функцию можно написать как процедуру. 

PL/pgSQL функции можно объявить с выходными параметрами вместо явной спецификации возвращаемого типа. Это не добавляет никакой значительной возможности языку, но чаще всего удобно для возвращения множества значений. RETURNS TABLE также может быть использован вместо RETURNS SETOF. 
