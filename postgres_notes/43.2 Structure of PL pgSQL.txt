Функции, написанные на PL/pgSQL определяются на сервере через выполнение комманды CREATE FUNCTION. Это выглядит, например, как: 

	CREATE FUNCTION somefunc(integer, text) RETURNS integer 
	AS 'function body text'
	LANGUAGE plpgsql;

Тело функции - обычный строковый литерал, что касается CREATE FUNCTION. Часто помогает использование кавычек долларов для записи тела функции, вместо синтаксиса одинарных кавычек. Без долларных кавычек, любые одинарные кавычки и обратные слэши в теле функции должны быть экранированы через их задвоение. Практически все примеры используют литералы в долларных кавычках для тел функций.

PL/pgSQL - язык структурированный в блоках. Полный текст тела функции должен быть блоком. Блок определяется так:

	[ <<label>> ]
	[ DECLARE 
		declarations ]
	BEGIN 
		statements 
	END [ label ];
	
Каждое объявление и каждое выражение внутри блока должно заканчиваться точкой с запятой. Блок, появляющийся внутри другого блока должен иметь точку с запятой после END, тем не менее финальный END должен содержать тело функции, не требующее точку с запятой. 

Частой ошибкой является запись точки с запятой сразу же после BEGIN. Это некорректно и выдает ошибку синтаксиса. 

label необходим только в том случае, если требуется идентификаировать блок для использование в выражении EXIT, или для того, чтобы указать имена переменных, объявленных в блоке. Если label задается после END, то он должен совпадать с label в начале блока. 

Все ключевые слова не чувствительны к регистру. Идентификаторы неявно преобразуются в нижний регистр, если они не заключены в двойные кавычки, также как и в SQL командах. 

Комментарии есть однострочные (--) и многострочные (/*...*/)

Любое выражение в секции выражений блока может быть подблоком. Подблоки можно использовать для логической группировки или чтобы локализовывать переменные в малые группы выражений. Переменные, объявленные в подблоке скрывают все переменные с тем же именем во внешних блоках, но можно обратиться ко внешним переменным при помощи лейбла блока. 

	CREATE FUNCTION somefunc() RETURNS integer AS $$ 
	<< outerblock >> 
	DECLARE 
		quantity integer := 30;
	BEGIN 
		RAISE NOTICE 'Quantity here is %', quantity; -- 30
		quantity := 50;
		--
		-- Creates a subblock 
		-- 
		DECLARE 
			quantity integer := 80;
		BEGIN 
			RAISE NOTICE 'Quantity here is %', quantity; -- 80 
			RAISE NOTICE 'Outer quantity here is %', outerblock.quantity; -- 50 
		END;
		
		RAISE NOTIC 'Quantity here is %', quantity; -- 50 
		
		RETURN quantity;
	END;
	$$ LANGUAGE plpgsql;
	
Есть спрятанный "внешний блок", окружающий тело любой PL/pgSQL функции. Этот блок содержи объявление параметров функции (если они есть) и специальные переменные, например, такие как FOUND. Этот внешний блок помечается как имя функции, означающий, что параметры и специальные переменные могут быть квалифиуированы через имя функции. 

Важно не путать использование BEGIN/END для группирующих утверджений в PL/pgSQL с похожими SQL командами для контроля транзакций. PL/pgSQL BEGIN/END используются только для группировки - они не начинают и не заканчивают транзакцию. Также, блок содержащий EXCEPTION формирует подтранзакцию которую может быть откачена без влияния на внешнюю транзакцию.
